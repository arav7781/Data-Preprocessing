# -*- coding: utf-8 -*-
"""pD_Series

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbKMo8XWW10K8qm3mIH9-GM_ea7kKn5W
"""

import pandas as pd
import numpy as np

labels = ['a','b','c']
my_data = [10,20,30]
arr = np.array(my_data)
d = {'a':10,'b':20,'c':30}

pd.Series(data=my_data)

pd.Series(arr)

pd.Series(arr,labels)

pd.Series(pd)

ser1 = pd.Series([1,2,3,4],index = ['USA','Germany','USSR','Japan'])#countru name are indexes here

ser1#and the nos are data

ser2 = pd.Series([1,2,5,4],index = ['USA','Germany','Italy','Japan'])

ser2

ser1['USA']

ser1 + ser2#add two series using index no but the indexes should be common

from numpy.random import randn
np.random.seed(101)#used for generating random nos

df = pd.DataFrame(randn(5,4),index='A B C D E'.split(),columns='W X Y Z'.split())#5 is row 4 is column

df#spilt is used to spilt the data in the df

df['W']

type(df['W'])

df['new'] = df['W'] + df['Y'] #new column mai aagya W aur Y ka addition

df

df.drop('new',axis=1,inplace=True)#drop the new column
#inplace = true is used for saving the operations in the dataframe

df

df.drop('E',axis=0)

df

df.loc['A']#alphabet ke through locate krne ke liye loc

df.iloc[2]#iloc for locating with no

df.loc['B','Y']#loc for locating with alphabet

df.loc[['A','B'],['W','Y']]#multiple loc

df>0#jo value>0 hai vha true

df[df>0]#df mai <0 pe NAN

df[df['W']>0]

df[df['W']>0]['Y']#w>0 vha vha y ki value print krra hai

df[df['W']>0][['Y','X']]#multiple columns

df[(df['W']>0) & (df['Y']<1)]#multiple conditions

df[(df['W']>0) | (df['Y']<1)]

df.reset_index()#reset the index to default 01234

newind = 'CA NY WY OR CO'.split()#giving new idx to the rows

df['States'] = newind#state column mai store krri hai

df

df.set_index('States')#set the states as index

df

df.set_index('States',inplace=True)

df

outside = ['G1','G1','G1','G2','G2','G2']
inside = [1,2,3,1,2,3]
hier_index = list(zip(outside,inside))#zip the outside and the inside list together
hier_index = pd.MultiIndex.from_tuples(hier_index)

hier_index

df = pd.DataFrame(randn(6,2),index=hier_index,columns=['A','B'])

df

df.loc['G1']

df.loc['G1'].loc[1]

np.arange(5)#to make a arr of 5 elements

np.zeros(5)

np.ones(3)

samplearray = np.arange(10)

samplearr2 = samplearray.reshape(2,5)#to reshape to 2d arr

samplearray.argmax()#index of max value return krta hai

samplearr2

samplearray.max()